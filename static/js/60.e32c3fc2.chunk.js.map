{"version":3,"file":"static/js/60.e32c3fc2.chunk.js","mappings":"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","sources":["components/shared/FormButton/FormButton.jsx","redux/contacts/selectors.js","components/Forms/ContactForm/ContactForm.jsx","components/ContactList/Item/Item.jsx","components/ContactList/ContactList.jsx","redux/filter/selectors.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { Button } from '@chakra-ui/react';\n\nexport const FormButton = ({ text, type, onRemove }) => {\n  return (\n    <Button onClick={onRemove} type={type}>\n      {text}\n    </Button>\n  );\n};\n","export const getContacts = ({ contacts }) => contacts.items;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    return normalizedName.includes(normalizedFilter);\n  });\n  return result;\n};\n","import { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { FormButton } from 'components/shared/FormButton/FormButton';\n\nimport {\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Box,\n} from '@chakra-ui/react';\nimport { BsFillPersonFill, BsTelephoneFill } from 'react-icons/bs';\n\nconst ContactForm = () => {\n  const [state, setState] = useState({ name: '', number: '' });\n  const { name, number } = state;\n\n  const dispatch = useDispatch();\n\n  const onAddContact = payload => {\n    dispatch(addContact(payload));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddContact({ ...state });\n    reset();\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.currentTarget;\n\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const reset = () => {\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  return (\n    <Box m=\"10px\" boxShadow=\"base\" p=\"6\" rounded=\"md\">\n      <form onSubmit={handleSubmit}>\n        <InputGroup size=\"lg\" mb=\"10px\">\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={\n              <Icon as={BsFillPersonFill} w={7} h={7} color=\"gray.300\" />\n            }\n          />\n          <Input\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Z0-9_.\\-]+[\\\\\\|\\s]?[a-zA-Z0-9_.\\-]+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            variant=\"flushed\"\n            focusBorderColor=\"pink.400\"\n            required\n          />\n        </InputGroup>\n        <InputGroup size=\"lg\" mb=\"20px\">\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={\n              <Icon as={BsTelephoneFill} w={7} h={7} color=\"gray.300\" />\n            }\n          />\n          <Input\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"[0-9.\\-]*\"\n            title=\"Phone number must be digits and can contain dashes, parentheses\"\n            variant=\"flushed\"\n            focusBorderColor=\"pink.400\"\n            required\n          />\n        </InputGroup>\n        <FormButton type=\"submit\" text=\"Add contact\" />\n      </form>\n    </Box>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default memo(ContactForm);\n","import PropTypes from 'prop-types';\nimport { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/operations';\n\nimport { FormButton } from 'components/shared/FormButton/FormButton';\n\nimport { Text, ListItem, Box } from '@chakra-ui/react';\n\nconst Item = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  const onRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  return (\n    <ListItem\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      p=\"2px\"\n    >\n      <Box display=\"flex\">\n        <Text mr=\"7px\" color=\"white\">\n          {name}\n        </Text>\n        <Text mr=\"10px\" color=\"white\">\n          {number}\n        </Text>\n      </Box>\n      <FormButton onRemove={() => onRemoveContact(id)} text=\"Delete\" />\n    </ListItem>\n  );\n};\n\nItem.propTypes = {\n  removeContact: PropTypes.func,\n};\n\nexport default memo(Item);\n","import PropTypes from 'prop-types';\nimport Item from './Item/Item';\nimport { UnorderedList } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = ({ items }) => {\n  const contacts = useSelector(getFilteredContacts);\n\n  const elements = contacts.map(item => <Item key={item.id} contact={item} />);\n  return (\n    <>\n      <UnorderedList maxWidth=\"400px\" p=\"15px\">\n        {elements}\n      </UnorderedList>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const getFilter = ({ filter }) => filter;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    return normalizedName.includes(normalizedFilter);\n  });\n  return result;\n};\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { getFilter } from 'redux/filter/selectors';\n\nimport { Input, InputGroup, InputLeftElement, Icon } from '@chakra-ui/react';\nimport { BsSearchHeart } from 'react-icons/bs';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onSetFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <InputGroup size=\"lg\">\n      <InputLeftElement\n        pointerEvents=\"none\"\n        children={<Icon as={BsSearchHeart} w={7} h={7} color=\"gray.300\" />}\n      />\n      <Input\n        type=\"text\"\n        value={filter}\n        onChange={onSetFilter}\n        placeholder=\"Find contacts by name\"\n        focusBorderColor=\"pink.400\"\n        bg=\"white\"\n      />\n    </InputGroup>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\n\nimport ContactForm from '../../components/Forms/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\n\nimport { Text, Heading, Box, Center, Divider } from '@chakra-ui/react';\n\nconst Contacts = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" flexDirection=\"column\">\n      <Center p=\"5px\" display=\"flex\" flexDirection=\"column\">\n        <Heading p=\"5px\" as=\"h1\" fontSize=\"40px\">\n          My Phonebook\n        </Heading>\n        <ContactForm />\n      </Center>\n      <Divider />\n      <Box mt=\"15px\" bg=\"#e56ba2\" p=\"7px\" borderRadius=\"5px\">\n        <Heading as=\"h2\">Contacts</Heading>\n        <Filter />\n        {contacts.length > 0 ? (\n          <ContactList />\n        ) : (\n          <Text pt=\"10px\">\n            Huh... Nothing to show! It's time to make friends!💫\n          </Text>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormButton","text","type","onRemove","onClick","getFilteredContacts","contacts","filter","items","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","number","state","setState","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","m","boxShadow","p","rounded","onSubmit","payload","preventDefault","addContact","size","mb","pointerEvents","children","as","BsFillPersonFill","w","h","color","I","onChange","pattern","title","variant","focusBorderColor","required","BsTelephoneFill","memo","Item","contact","id","display","justifyContent","alignItems","mr","removeContact","onRemoveContact","ContactList","elements","useSelector","map","item","maxWidth","getFilter","Filter","BsSearchHeart","target","setFilter","placeholder","bg","useEffect","fetchContacts","flexDirection","fontSize","mt","borderRadius","length","pt"],"sourceRoot":""}