{"version":3,"file":"static/js/159.808e0d0b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Contacts/contacts.module.css?eff6","redux/contacts/selectors.js","redux/filter/selectors.js","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","webpack://react-homework-template/./src/components/shared/FormButton/formButton.module.css?6a79","components/shared/FormButton/FormButton.jsx","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","webpack://react-homework-template/./src/components/ContactList/Item/item.module.css?d85d","components/ContactList/Item/Item.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"contacts_wrap__C+3Eo\",\"noContacts\":\"contacts_noContacts__q26kn\",\"list\":\"contacts_list__E8xN7\",\"contactsHeader\":\"contacts_contactsHeader__TaR8g\"};","export const getContacts = ({ contacts }) => contacts.items;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    return normalizedName.includes(normalizedFilter);\n  });\n  return result;\n};\n","export const getFilter = ({ filter }) => filter;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    return normalizedName.includes(normalizedFilter);\n  });\n  return result;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"formButton_btn__xMcpE\"};","import css from './formButton.module.css';\n\nexport const FormButton = ({ text, type, onRemove }) => {\n  return (\n    <button onClick={onRemove} className={css.btn} type={type}>\n      {text}\n    </button>\n  );\n};\n","import css from './contactForm.module.css';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { memo } from 'react';\nimport { FormButton } from 'components/shared/FormButton/FormButton';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ name: '', phone: '' });\n  const { name, phone } = state;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    reset();\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.currentTarget;\n\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const reset = () => {\n    setState({\n      name: '',\n      phone: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor=\"name\">\n        Name\n        <input\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor=\"number\">\n        Number\n        <input\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <FormButton type=\"submit\" text=\"Add contact\" />\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default memo(ContactForm);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactList_list__R0BG5\",\"btn\":\"contactList_btn__D1sqk\",\"margin\":\"contactList_margin__rp96R\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"item_contactItem__QnQow\",\"item\":\"item_item__SVHoU\"};","import css from './item.module.css';\nimport PropTypes from 'prop-types';\nimport { memo } from 'react';\n\nimport { FormButton } from 'components/shared/FormButton/FormButton';\n\nconst Item = ({ contact: { name, phone, id }, removeContact }) => {\n  return (\n    <li className={css.item}>\n      <p className={css.contactItem}>{name}</p>\n      <p className={css.contactItem}>{phone}</p>\n      <FormButton onRemove={() => removeContact(id)} text=\"Delete\" />\n    </li>\n  );\n};\n\nItem.propTypes = {\n  removeContact: PropTypes.func,\n};\n\nexport default memo(Item);\n","import css from './contactList.module.css';\nimport PropTypes from 'prop-types';\n\nimport Item from './Item/Item';\n\nexport const ContactList = ({ items, removeContact }) => {\n  const elements = items.map(item => (\n    <Item key={item.id} removeContact={removeContact} contact={item} />\n  ));\n  return (\n    <>\n      <ul className={css.list}>{elements}</ul>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"filter_filterInput__2T6yn\"};","import css from './filter.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n","import css from './contacts.module.css';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { getFilter } from '../../redux/filter/selectors';\nimport {\n  fetchContacts,\n  addContact,\n  removeContact,\n} from '../../redux/contacts/operations';\n\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = payload => {\n    dispatch(addContact(payload));\n  };\n\n  const onRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  const onSetFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n  return (\n    <>\n      <div>Contacts</div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={onAddContact} />\n      <section className={css.list}>\n        <h2 className={css.contactsHeader}>Contacts</h2>\n        <Filter onChange={onSetFilter} value={filter} />\n        {contacts.length > 0 ? (\n          <ContactList items={contacts} removeContact={onRemoveContact} />\n        ) : (\n          <p className={css.noContacts}>Huh... Still no contacts here!</p>\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getFilteredContacts","contacts","filter","items","normalizedFilter","toLowerCase","name","includes","getFilter","FormButton","text","type","onRemove","onClick","className","css","ContactForm","onSubmit","useState","phone","state","setState","handleChange","e","currentTarget","value","reset","preventDefault","htmlFor","onChange","pattern","title","required","memo","Item","contact","id","removeContact","ContactList","elements","map","item","Filter","useSelector","dispatch","useDispatch","useEffect","fetchContacts","payload","addContact","target","setFilter","length"],"sourceRoot":""}